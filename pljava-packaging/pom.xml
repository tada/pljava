<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.postgresql</groupId>
		<artifactId>pljava.app</artifactId>
		<version>1.7-SNAPSHOT</version>
	</parent>
	<artifactId>pljava-packaging</artifactId>
	<name>PL/Java packaging</name>
	<description>Package PL/Java build for zip/tar distribution</description>
	<packaging>pom</packaging>

	<dependencies>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>pljava-api</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>pljava</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>pljava-examples</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>pljava-so</artifactId>
			<version>${project.version}</version>
			<type>pom</type>
		</dependency>
	</dependencies>

	<properties>
		<module.pathname>libpljava-so-${project.version}</module.pathname>
	</properties>

	<profiles>
		<profile>
			<id>osx</id>
			<activation>
				<os>
					<name>mac os x</name>
				</os>
			</activation>
			<properties>
				<module.pathname>libpljava-so-${project.version}.bundle</module.pathname>
			</properties>
		</profile>

		<profile>
			<id>windows</id>
			<activation>
				<os>
					<family>windows</family>
				</os>
			</activation>
			<properties>
				<module.pathname>pljava-so-${project.version}</module.pathname>
			</properties>
		</profile>

		<!--
		  - Activate this profile just as a convenient way to make Maven
		  - download the pgjdbc driver. It isn't needed in any way for
		  - building, but then you will have it in your local Maven repository
		  - if you want to add it to your classpath for some tests.
		  -->
		<profile>
			<id>pgjdbc</id>
			<dependencies>
				<dependency>
					<groupId>org.postgresql</groupId>
					<artifactId>postgresql</artifactId>
					<version>[42.6.0,)</version>
				</dependency>
			</dependencies>
		</profile>

		<!--
		  - Activate this profile just as a convenient way to make Maven
		  - download the pgjdbc-ng driver. It isn't needed in any way for
		  - building, but then you will have it in your local Maven repository
		  - if you want to add it to your classpath for some tests.
		  -->
		<profile>
			<id>pgjdbc-ng</id>
			<dependencies>
				<dependency>
					<groupId>com.impossibl.pgjdbc-ng</groupId>
					<artifactId>pgjdbc-ng-all</artifactId>
					<version>[0.8.4,0.8.8),(0.8.8,)</version>
				</dependency>
			</dependencies>
		</profile>
	</profiles>

	<build>
		<resources>
			<resource>
				<directory>${basedir}/src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>

		<plugins>

			<plugin>
				<groupId>org.postgresql</groupId>
				<artifactId>pljava-pgxs</artifactId>
				<version>${pljava.pgxs.version}</version>
				<executions>
					<execution>
						<id>set-ver-classifier</id>
						<phase>initialize</phase>
						<goals>
							<goal>scripted-goal</goal>
						</goals>
						<configuration>
							<script mimetype="application/javascript">
<![CDATA[
function execute()
{
	var twocomp =
		getPgConfigProperty("--version")
		.replaceAll("devel.*|alpha.*|beta.*|rc.*$", "\\.99")
		.replaceAll("^[^\\d]*+(\\d++)\\.(\\d++)(?:\\.(\\d++))?.*$", "pg$1.$2");
	/*
	 * Use a two-component version classifier only for PG 9 and earlier.
	 * For 10 and later, use only the major component.
	 */
	if ( twocomp.matches("pg\\d\\.\\d+") )
		setProjectProperty("PGSQL_VER_CLASSIFIER", twocomp);
	else {
		var onecomp = twocomp.replaceAll("\\.\\d+", "");
		setProjectProperty("PGSQL_VER_CLASSIFIER", onecomp);
	}
	return null;
}
]]>
							</script>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<id>pljava extension files</id>
						<phase>process-resources</phase>
						<goals>
							<goal>resources</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<executions>
					<execution>
						<id>compile the jar extractor</id>
						<phase>compile</phase>
						<goals>
							<goal>compile</goal>
						</goals>
						<configuration>
							<proc>none</proc>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.7</version>
				<dependencies>
					<dependency>
						<groupId>org.apache.ant</groupId>
						<artifactId>ant</artifactId>
						<version>1.10.11</version>
					</dependency>
				</dependencies>
				<executions>
					<execution>
						<id>pljava package distribution</id>
						<phase>package</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<ant target="package" dir="${project.basedir}"/>
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>

	<reporting>
		<plugins>
			<plugin>
				<groupId>org.postgresql</groupId>
				<artifactId>pljava-pgxs</artifactId>
				<version>${pljava.pgxs.version}</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>scripted-report</report>
						</reports>
						<configuration>
							<script mimetype="application/javascript">
<![CDATA[
function getName(report, locale)
{
	return "JavaDocs";
}

function getDescription(report, locale)
{
	return "JavaDoc API documentation.";
}

function getOutputName(report)
{
	return java.nio.file.Paths.get("apidocs", "index").toString();
}

function isExternalReport(report)
{
	return true;
}

function executeReport(report, locale)
{
	try
	{
		var title = report.project.name + " " + report.project.version;

		var basedir = report.project.basedir.toPath();

		var srcroot = java.nio.file.Paths.get("src", "main", "java");
		srcroot = resolve(basedir, srcroot);
		var srcrooturi = srcroot.toUri();

		var jdklink = "https://docs.oracle.com/" +
			locale.language + "/java/javase/12/docs/api";

		var bottom =
			"Copyright &#169; " +
			report.project.inceptionYear +
			"&#x2013;" + new Date().getFullYear() +
			"<a href='" + report.project.organization.url + "'>" +
			report.project.organization.name + "</a>";

		var args = java.util.List.of(
			/*
			 * The 'standard options' that javadoc inherits from javac.
			 * Do not add --release: it causes -encoding to be ignored (in
			 * javadoc 12 through 15, anyway). -d is documented as a doclet
			 * option, but included here to be seen by the
			 * RelativizingFileManager (which may otherwise complain that no
			 * class output location has been set).
			 */
			"-d",           report.reportOutputDirectory.toPath()
								.resolve("apidocs").toString(),
			"-encoding",    report.inputEncoding,
			"-sourcepath",  srcroot.toString(),
			/*
			 * Core javadoc options.
			 * Avoid the legacy package/private/protected/public options; they
			 * can clobber the effects of the newer -show-...=... options.
			 */
			"-locale",      locale.toString(),
			"-quiet",
			/*
			 * Options that are passed to the doclet.
			 */
			"-author",
			"-bottom",      bottom,
			"-docencoding", report.outputEncoding,
			"-doctitle",    title,
			"-link",        jdklink,
			"-use",
			"-version",
			"-windowtitle", title,
			/*
			 * Source files to document
			 */
			srcroot.resolve("Node.java").toString(),
			srcroot.resolve("JarX.java").toString()
		);

		debug(args.toString());
		var tool = javax.tools.ToolProvider.getSystemDocumentationTool();

		function diagListener(d)
		{
			var s = d.source;

			if ( null === s )
				s = "";
			else
			{
				s = srcrooturi.relativize(s.toUri()).toString();
				s += "[" + d.lineNumber + "," + d.columnNumber + "] ";
			}

			diag(d.kind, s + d.getMessage(locale));
		}

		var task = tool.getTask(null, null, diagListener, null, args, null);
		if (task.call())
			return null;
		return report.exceptionWrap("Javadoc errors were reported");
	}
	catch(e)
	{
		return report.exceptionWrap(e);
	}
}
]]>
							</script>
						</configuration>
					</reportSet>
				</reportSets>
			</plugin>
		</plugins>
	</reporting>
</project>
