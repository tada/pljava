<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.postgresql</groupId>
		<artifactId>pljava.app</artifactId>
		<version>1.7-SNAPSHOT</version>
	</parent>
	<artifactId>pljava</artifactId>
	<name>PL/Java backend Java code</name>
	<description>Java stored procedure implementation for PostgreSQL</description>
	<dependencies>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>pljava-api</artifactId>
			<version>${project.version}</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<compilerArgs>
						<arg>-h</arg>
						<arg>${basedir}/target/javah-include</arg>

						<arg>--processor-module-path</arg>
						<arg>${basedir}/../pljava-api/target/pljava-api-${project.version}.jar</arg>
					</compilerArgs>
					<annotationProcessors>
						<annotationProcessor>
							org.postgresql.pljava.annotation.processing.DDRProcessor
						</annotationProcessor>
					</annotationProcessors>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<reporting>
		<plugins>
			<plugin>
				<groupId>org.postgresql</groupId>
				<artifactId>pljava-pgxs</artifactId>
				<version>${pljava.pgxs.version}</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>scripted-report</report>
						</reports>
						<configuration>
							<script mimetype="application/javascript">
<![CDATA[
function canGenerateReport(report)
{
	/*
	 * Javadoc is run below with the --module-source-path mod=path syntax, which
	 * appears in javadoc 12.
	 */
	var v = java.lang.Runtime.version();
	if ( 0 <= v.compareTo(java.lang.Runtime.Version.parse("12")) )
		return true;
	warn("Skipping JavaDocs; Java >= 12 required");
	return false;
}

function getName(report, locale)
{
	return "JavaDocs";
}

function getDescription(report, locale)
{
	return "JavaDoc API documentation.";
}

function getOutputName(report)
{
	return java.nio.file.Paths
		.get("apidocs", "org.postgresql.pljava.internal", "module-summary")
		.toString();
}

function isExternalReport(report)
{
	return true;
}

function executeReport(report, locale)
{
	try
	{
		var paths = buildPaths(report.project.compileClasspathElements);

		var title = report.project.name + " " + report.project.version;

		var basedir = report.project.basedir.toPath();

		var srcroot = java.nio.file.Paths.get("src", "main", "java");
		srcroot = resolve(basedir, srcroot);
		var srcrooturi = srcroot.toUri();

		var jdklink = "https://docs.oracle.com/" +
			locale.language + "/java/javase/12/docs/api";

		var apioffline =
			basedir.toUri().resolve("../pljava-api/target/site/apidocs");

		var bottom =
			"Copyright &#169; " +
			report.project.inceptionYear +
			"&#x2013;" + new Date().getFullYear() +
			"<a href='" + report.project.organization.url + "'>" +
			report.project.organization.name + "</a>";

		var args = java.util.List.of(
			/*
			 * The 'standard options' that javadoc inherits from javac. Do not
			 * add --release: it causes -encoding to be ignored (in javadoc 12
			 * through 15, anyway). -d is documented as a doclet option, but
			 * included here to be seen by the RelativizingFileManager (which
			 * may otherwise complain that no class output location has been
			 * set).
			 */
			"-d",                     report.reportOutputDirectory.toPath()
										.resolve("apidocs").toString(),
			"-encoding",              report.inputEncoding,
			"--module-path",          paths.get("modulepath"),
			"--module-source-path", "org.postgresql.pljava.internal=" + srcroot,
			// ^^^ Options recognized by the file manager end here ^^^
			"--module",               "org.postgresql.pljava.internal",
			/*
			 * Core javadoc options.
			 * Avoid the legacy package/private/protected/public options; they
			 * can clobber the effects of the newer -show-...=... options.
			 */
			"-locale",                locale.toString(),
			"-quiet",
			"--show-module-contents", "all",
			"--show-packages",        "all",
			"--show-types",           "package",
			"--show-members",         "package",
			/*
			 * Options that are passed to the doclet.
			 */
			"-author",
			"-bottom",            bottom,
			"-docencoding",       report.outputEncoding,
			"-doctitle",          title,
			"-link",              jdklink,
			"-linkoffline",
								  "../../RELDOTS/pljava-api/apidocs",
								  apioffline.toString(),
			//"-sourcetab",       "4",//seemed good idea but implies -linksource
			"-use",
			"-version",
			"-windowtitle",       title
		);

		debug(args.toString());
		var tool = javax.tools.ToolProvider.getSystemDocumentationTool();

		function diagListener(d)
		{
			var s = d.source;

			if ( null === s )
				s = "";
			else
			{
				s = srcrooturi.relativize(s.toUri()).toString();
				s += "[" + d.lineNumber + "," + d.columnNumber + "] ";
			}

			diag(d.kind, s + d.getMessage(locale));
		}

		var Charset = Java.type("java.nio.charset.Charset");

		var smgr = tool.getStandardFileManager(
				diagListener,
				locale,
				Charset.forName(report.inputEncoding)
			);

		/*
		 * A special file manager that will rewrite the RELDOTS seen in
		 * -linkoffline above. The options a file manager recognizes must be the
		 * first ones in args; handleFirstOptions below returns at the first one
		 * the file manager doesn't know what to do with. Java 19 seems to have
		 * learned to pass the args to the file manager without the fuss here.
		 */
		var rmgr = new org.postgresql.pljava.pgxs.RelativizingFileManager(
			smgr, Charset.forName(report.outputEncoding));

		var v = java.lang.Runtime.version();
		if ( 0 > v.compareTo(java.lang.Runtime.Version.parse("19-ea")) )
			rmgr.handleFirstOptions(args);

		var task = tool.getTask(null, rmgr, diagListener, null, args, null);
		if (task.call())
			return null;
		return report.exceptionWrap("Javadoc errors were reported");
	}
	catch(e)
	{
		return report.exceptionWrap(e);
	}
}
]]>
							</script>
						</configuration>
					</reportSet>
				</reportSets>
			</plugin>
		</plugins>
	</reporting>
</project>
