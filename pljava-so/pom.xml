<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.postgresql</groupId>
		<artifactId>pljava.app</artifactId>
		<version>1.6.0-SNAPSHOT</version>
	</parent>
	<artifactId>pljava-so</artifactId>
	<name>PL/Java backend native code</name>
	<description>
		Generates the pljava (.so, .dll, etc.) library which gets loaded by the PostgreSQL backend
	</description>
	<packaging>pom</packaging>

	<build>
		<plugins>
			<plugin>
				<groupId>org.postgresql</groupId>
				<artifactId>pljava-pgxs</artifactId>
				<version>${pljava.pgxs.version}</version>
				<executions>
					<execution>
						<id>build-shared-object</id>
						<goals>
							<goal>scripted-goal</goal>
						</goals>
						<configuration>
							<script mimetype="application/javascript">
<![CDATA[
	var ArrayList = Java.type("java.util.ArrayList");
	var HashMap = Java.type("java.util.HashMap");
	var Paths = Java.type("java.nio.file.Paths");
	var of = java.util.List.of;

	var base_dir_path = project.basedir.getAbsolutePath();
	var source_path = Paths.get(base_dir_path, "src", "main", "c");
	var target_path = Paths.get(project.build.directory, "pljava-pgxs");
	var library_name = "pljava-so-" + project.parent.version;

	var cc = getPgConfigProperty("--cc");
	var cflags = getPgConfigProperty("--cflags");
	var cppflags = getPgConfigProperty("--cppflags");
	var cflags_sl = getPgConfigProperty("--cflags_sl");
	var ldflags = getPgConfigProperty("--ldflags");
	var ldflags_sl = getPgConfigProperty("--ldflags_sl");
	var ldflags_ex = getPgConfigProperty("--ldflags_ex");
	var includedir = getPgConfigProperty("--includedir");
	var includedir_server = getPgConfigProperty("--includedir-server");
	var bindir = getPgConfigProperty("--bindir");
	var pkglibdir = getPgConfigProperty("--pkglibdir");

	var java_home = java.lang.System.getProperty("java.home");
	var java_include =  Paths.get(java_home, "include");
	var pljava_include = Paths.get(base_dir_path, "src", "main", "include");
	var base_includes = new ArrayList(java.util.List.of(
		java_include.toString(),
		includedir,
		includedir_server,
		pljava_include.toString(),
		pljava_include.resolve(Paths.get("fallback", "jdbc")).toString(),
		Paths.get(base_dir_path, "..", "pljava", "target", "javah-include").toString()
	));

	var base_defines = new HashMap();
	base_defines.put("PLJAVA_SO_VERSION", project.parent.version);
	if ( cc.equalsIgnoreCase("gcc") )
		base_defines.put("GNU_GCC", null);

	var jvmdflt = java.lang.System.getProperty('pljava.libjvmdefault');
	if ( null !== jvmdflt )
	{
		var jvmdfltQuoted = quoteStringForC(jvmdflt);
		base_defines.put("PLJAVA_LIBJVMDEFAULT", jvmdfltQuoted);
	}

	var configuration = [
		{
			name : "Linux",
			
			object_extension : ".o",

			probe: function(os_name) {
				return os_name.toLowerCase().contains("linux");
			},

			compile : function(cc, files, output_dir, includes, defines, flags) {
				includes.add(java_include.resolve("linux").toString());
				defines.put("Linux", null);
				flags.add("-c");

				var compileProcess = utils.processBuilder(function(l) {
					l.add(cc);
					l.addAll(pgxs.formatDefines(defines));
					l.addAll(pgxs.formatIncludes(includes));
					l.addAll(flags);
					l.addAll(files);
				});
				compileProcess.directory(output_dir.toFile());
				return runCommand(compileProcess);
			},

			link : function(cc, flags, files, target_path) {
				flags.add("-shared-libgcc");
				var linkingProcess = utils.processBuilder(function(l) {
					l.add(cc);
					l.addAll(flags);
					l.addAll(of("-shared", "-o", "lib" + library_name + ".so"));
					l.addAll(files);
				});
				linkingProcess.directory(target_path.toFile());
				return runCommand(linkingProcess);
			}
		},

		{
			name : "Mac OS X",

			object_extension : ".o",

			probe: function(os_name) {
				return os_name.toLowerCase().contains("mac os x");
			},

			compile : function(cc, files, output_dir, includes, defines, flags) {
				includes.add(java_include.resolve("darwin").toString());
				defines.put("Darwin", null);
				flags.add("-c");

				var compileProcess = utils.processBuilder(function(l) {
					l.add(cc);
					l.addAll(pgxs.formatDefines(defines));
					l.addAll(pgxs.formatIncludes(includes));
					l.addAll(flags);
					l.addAll(files);
				});
				compileProcess.directory(output_dir.toFile());
				return runCommand(compileProcess);
			},

			link : function(cc, flags, files, target_path) {
				flags.addAll(of("-bundle_loader", Paths.get(bindir, "postgres").toString()));
				var linkingProcess = utils.processBuilder(function(l) {
					l.add(cc);
					l.addAll(flags);
					l.addAll(of("-bundle", "-o", "lib" + library_name + ".bundle"));
					l.addAll(files);
				});
				linkingProcess.directory(target_path.toFile());
				return runCommand(linkingProcess);
			}
		},

		{
			name : "Windows MinGW",

			object_extension : ".o",

			probe: function(os_name) {
				return os_name.toLowerCase().contains("windows")
					&& java.lang.System.getenv().containsKey("MSYSTEM")
					&& java.lang.System.getenv().get("MSYSTEM").equalsIgnoreCase("MINGW64");
			},

			compile : function(cc, files, output_dir, includes, defines, flags) {
				includes.add(java_include.resolve("win32").toString());
				includes.add(Paths.get(includedir_server, "port", "win32").toString());
				includes.add(pljava_include.resolve(Paths.get("fallback", "win32")).toString());
				defines.put("Windows", null);
				flags.add("-c");

				// due to some reason -DBUILDING_DLL causes the linker to fail
				flags.remove("-DBUILDING_DLL");

				var compileProcess = utils.processBuilder(function(l) {
					l.add(cc);
					l.addAll(pgxs.formatDefines(defines));
					l.addAll(pgxs.formatIncludes(includes));
					l.addAll(flags);
					l.addAll(files);
				});
				compileProcess.directory(output_dir.toFile());
				return runCommand(compileProcess);
			},

			link : function(cc, flags, files, target_path) {
				flags.addAll(of("-Wl,--export-all-symbols","-shared-libgcc"));
				var linkingProcess = utils.processBuilder(function(l) {
					l.add(cc);
					l.addAll(flags);
					l.addAll(of("-shared", "-o", library_name + ".dll"));
					l.addAll(files);

					// From compiler-mingw64 profile
					l.addAll(of("-L" + pkglibdir, "-Bdynamic", "-lpostgres"));
				});
				linkingProcess.directory(target_path.toFile());
				return runCommand(linkingProcess);
			}
		},

		{
			name : "Windows MSVC",

			object_extension : ".obj",

			probe: function(os_name) {
				return os_name.toLowerCase().contains("windows")
					&& java.lang.System.getenv().containsKey("VCINSTALLDIR");
			},

			formatIncludes : function(includes_list) {
				return includes_list.stream().map(function(s) {
					return "/I" + s;
				}).collect(java.util.stream.Collectors.toList());
			},

			formatDefines : function(defines_map) {
				return defines_map.entrySet().stream().map(function(s) {
					var define = "/D" + s.getKey();
					if (s.getValue() != null)
						define += "=" + s.getValue();
					return define;
				}).collect(java.util.stream.Collectors.toList());
			},

			compile : function(cc, files, output_dir, includes, defines, flags) {
				includes.add(java_include.resolve("win32").toString());
				includes.add(Paths.get(includedir_server, "port", "win32").toString());
				includes.add(pljava_include.resolve(Paths.get("fallback", "win32")).toString());
				includes.add(Paths.get(includedir_server, "port", "win32_msvc").toString());

				defines.put("Windows", null);
				defines.put("WIN32", null);
				defines.put("NDEBUG", null);

				var compileProcess = utils.processBuilder(function(l) {
					l.add("cl");
					l.addAll(of("/c", "/nologo", "/MD"));
					l.addAll(pgxs.formatDefines(defines));
					l.addAll(pgxs.formatIncludes(includes));
					l.addAll(files);
				});

				compileProcess.directory(output_dir.toFile());
				return runCommand(compileProcess);
			},

			link : function(cc, flags, files, target_path) {

				var linkingProcess = utils.processBuilder(function(l) {
					l.add("link");
					l.addAll(of("/MANIFEST", "/NOLOGO", "/DLL", "/SUBSYSTEM:CONSOLE", "/INCREMENTAL:NO"));
					l.add("/OUT:" + library_name + ".dll");

					// From compiler-msvc profile
					l.add(Paths.get(pkglibdir, "postgres.lib").toString());
					l.addAll(files);
				});
				linkingProcess.directory(target_path.toFile());
				return runCommand(linkingProcess);
			}
		}
	];

	var os_name = java.lang.System.getProperty("os.name");
	var implementation = null;
	var extension = null;
	for (var index = 0; index < configuration.length; index ++) {
		if(configuration[index].probe(os_name)) {
			implementation = configuration[index];
			extension = implementation.object_extension;
			info("Using compiling/linking rules for " + implementation.name);
			break;
		}
	}

	var pgxs = new org.postgresql.pljava.pgxs.AbstractPGXS(implementation);

	var files = utils.getFilesWithExtension(source_path, ".c");
	var compile_flags = new ArrayList();
	compile_flags.addAll(pgxs.getPgConfigPropertyAsList(cflags));
	compile_flags.addAll(pgxs.getPgConfigPropertyAsList(cppflags));
	compile_flags.addAll(pgxs.getPgConfigPropertyAsList(cflags_sl));
	var exitCode = pgxs.compile(cc, files, target_path, base_includes, base_defines, compile_flags);
	if (exitCode != 0)
		throw new org.apache.maven.plugin
			.MojoExecutionException("Compilation failed with exit code: " + exitCode);

	var object_files =  utils.getFilesWithExtension(target_path, extension);
	var link_flags = new ArrayList();
	link_flags.addAll(pgxs.getPgConfigPropertyAsList(ldflags));
	link_flags.addAll(pgxs.getPgConfigPropertyAsList(ldflags_sl));
	link_flags.addAll(pgxs.getPgConfigPropertyAsList(ldflags_ex));
	exitCode = pgxs.link(cc, link_flags, object_files, target_path);
	if (exitCode != 0)
		throw new org.apache.maven.plugin
			.MojoExecutionException("Linking failed with exit code: " + exitCode);

]]>
							</script>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- The deploy goal will be hijacked by an ant task so the original plugin
				has to be silenced until we actually use it.
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<version>2.7</version>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin> -->

		</plugins>
	</build>
</project>