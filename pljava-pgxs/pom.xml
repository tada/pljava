<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.postgresql</groupId>
		<artifactId>pljava.app</artifactId>
		<version>1.7-SNAPSHOT</version>
	</parent>

	<artifactId>pljava-pgxs</artifactId>
	<packaging>maven-plugin</packaging>

	<name>PL/Java PGXS</name>
	<description>The maven plugin to build native code used inside PL/Java
	</description>

	<dependencies>
		<dependency>
			<groupId>org.apache.maven</groupId>
			<artifactId>maven-plugin-api</artifactId>
			<version>${maven.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.maven.plugin-tools</groupId>
			<artifactId>maven-plugin-annotations</artifactId>
			<version>3.6.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.maven.reporting</groupId>
			<artifactId>maven-reporting-impl</artifactId>
			<version>3.0.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.maven.reporting</groupId>
			<artifactId>maven-reporting-api</artifactId>
			<version>3.0</version>
		</dependency>
	</dependencies>

	<profiles>
		<profile>
			<id>nashornmod</id>
			<activation>
				<jdk>[15,)</jdk>
			</activation>
			<dependencies>
				<dependency>
					<groupId>org.openjdk.nashorn</groupId>
					<artifactId>nashorn-core</artifactId>
					<version>15.4</version>
				</dependency>
			</dependencies>
		</profile>
	</profiles>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<proc>none</proc>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-plugin-plugin</artifactId>
				<version>3.6.0</version>
				<configuration>
					<skipErrorNoDescriptorsFound>true
					</skipErrorNoDescriptorsFound>
				</configuration>
				<executions>
					<execution>
						<id>mojo-descriptor</id>
						<goals>
							<goal>descriptor</goal>
						</goals>
					</execution>
					<execution>
						<id>help-goal</id>
						<goals>
							<goal>helpmojo</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-plugin-plugin</artifactId>
				<version>3.6.0</version>
			</plugin>

			<plugin>
				<groupId>org.postgresql</groupId>
				<artifactId>pljava-pgxs</artifactId>
				<version>${project.version}</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>scripted-report</report>
						</reports>
						<configuration>
							<script mimetype="application/javascript">
<![CDATA[
function getName(report, locale)
{
	return "JavaDocs";
}

function getDescription(report, locale)
{
	return "JavaDoc API documentation.";
}

function getOutputName(report)
{
	return java.nio.file.Paths.get("apidocs", "index").toString();
}

function isExternalReport(report)
{
	return true;
}

function executeReport(report, locale)
{
	try
	{
		var paths = buildPaths(report.project.compileClasspathElements);

		var title = report.project.name + " " + report.project.version;

		var basedir = report.project.basedir.toPath();

		var srcroot = java.nio.file.Paths.get("src", "main", "java");
		srcroot = resolve(basedir, srcroot);
		var srcrooturi = srcroot.toUri();

		var jdklink = "https://docs.oracle.com/" +
			locale.language + "/java/javase/12/docs/api";

		var bottom =
			"Copyright &#169; " +
			report.project.inceptionYear +
			"&#x2013;" + new Date().getFullYear() +
			"<a href='" + report.project.organization.url + "'>" +
			report.project.organization.name + "</a>";

		var of = java.util.List.of;

		var args = of(
			/*
			 * The 'standard options' that javadoc inherits from javac. Do not
			 * add --release: it causes -encoding to be ignored (in javadoc 12
			 * through 15, anyway). -d is documented as a doclet option, but
			 * included here to be seen by the RelativizingFileManager (which
			 * may otherwise complain that no class output location has been
			 * set).
			 */
			"-d",           report.reportOutputDirectory.toPath()
								.resolve("apidocs").toString(),
			"-encoding",    report.inputEncoding,
			"--class-path", paths.get("classpath"),
			"--module-path",paths.get("modulepath"),
			"-sourcepath",  srcroot.toString(),
			/*
			 * Core javadoc options.
			 * Avoid the legacy package/private/protected/public options; they
			 * can clobber the effects of the newer -show-...=... options.
			 */
			"-locale",      locale.toString(),
			"-quiet",
			"--show-members", "package",
			"--show-types",   "package",
			/*
			 * Options that are passed to the doclet.
			 */
			"-author",
			"-bottom",      bottom,
			"-docencoding", report.outputEncoding,
			"-doctitle",    title,
			"-link",        jdklink,
			"-use",
			"-version",
			"-windowtitle", title
		);

		args = new java.util.ArrayList(args);

		var packages = [
			"org.postgresql.pljava.pgxs"
		];

		packages.forEach(function(p) { args.add(p); });

		debug(args.toString());
		var tool = javax.tools.ToolProvider.getSystemDocumentationTool();

		function diagListener(d)
		{
			var s = d.source;

			if ( null === s )
				s = "";
			else
			{
				s = srcrooturi.relativize(s.toUri()).toString();
				s += "[" + d.lineNumber + "," + d.columnNumber + "] ";
			}

			diag(d.kind, s + d.getMessage(locale));
		}

		var task = tool.getTask(null, null, diagListener, null, args, null);
		if (task.call())
			return null;
		return report.exceptionWrap("Javadoc errors were reported");
	}
	catch(e)
	{
		return report.exceptionWrap(e);
	}
}
]]>
							</script>
						</configuration>
					</reportSet>
				</reportSets>
			</plugin>
		</plugins>
	</reporting>

</project>
